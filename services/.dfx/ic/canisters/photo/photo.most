// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Picture = {content : Blob; fileType : Text};
type PictureId = Nat;
type PictureProfile =
  {
    createdAt : Timestamp;
    createdBy : UserPrincipal;
    description : Text;
    id : PictureId;
    owner : UserPrincipal;
    pic : Picture;
    picName : Text;
    status : PictureStatus
  };
type PictureStatus = {#disable; #enable; #pending};
type Timestamp = Int;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type UserPrincipal = Text;
actor {
  stable var idGenerator : Nat;
  stable var picsStore :
    {
      #branch : Branch<PictureId, PictureProfile>;
      #empty;
      #leaf : Leaf<PictureId, PictureProfile>
    }
};
